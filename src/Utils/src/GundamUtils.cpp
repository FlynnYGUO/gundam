//
// Created by Adrien Blanchet on 25/05/2023.
//

#include "GundamUtils.h"
#include "VersionConfig.h" // the only place it is included

#include "Logger.h"
#include "GenericToolbox.h"

#include <sstream>

LoggerInit([]{
  Logger::getUserHeader() << "[" << FILENAME << "]";
});


namespace GundamUtils {

  // forward version config that was auto generated by CMake
  std::string getVersionStr(){ return GundamVersionConfig::getVersionStr(); }
  std::string getVersionFullStr(){
    std::stringstream ss;
    ss << GundamVersionConfig::getVersionStr();
    if( not GundamVersionConfig::getVersionPostCommitNb().empty() ){
      ss << "+" << GundamVersionConfig::getVersionPostCommitNb() << "-" << GundamVersionConfig::getVersionPostCommitHash();
    }
    return ss.str();
  }

  std::string generateFileName(const CmdLineParser& clp_, const std::vector<std::pair<std::string, std::string>>& appendixDict_){
    std::vector<std::string> appendixList{};

    int maxArgLength{64};

    for( const auto& appendixDictEntry : appendixDict_ ){
      if( clp_.isOptionTriggered(appendixDictEntry.first) ){
        appendixList.emplace_back( appendixDictEntry.second );
        if( clp_.getNbValueSet(appendixDictEntry.first) > 0 ){

          auto args = clp_.getOptionValList<std::string>(appendixDictEntry.first);
          for( auto& arg : args ){
            // strip potential slashes and extensions
            arg = GenericToolbox::getFileNameFromFilePath(arg, false);
            if( arg.size() > maxArgLength ){
              // print dotdot if too long
              arg = arg.substr(0, maxArgLength);
              arg[arg.size()-1] = '.';
              arg[arg.size()-2] = '.';
              arg[arg.size()-3] = '.';
            }

            // cleanup from special chars
            arg = GenericToolbox::generateCleanBranchName(arg);
          }

          appendixList.back() = Form(
              appendixList.back().c_str(),
              GenericToolbox::joinVectorString(args, "_").c_str()
          );
        }
        else{
          appendixList.back() = GenericToolbox::trimString(Form( appendixList.back().c_str(), "" ), "_");
        }
      }
    }

    return GenericToolbox::joinVectorString(appendixList, "_");
  }



  bool ObjectReader::quiet{false};
  bool ObjectReader::throwIfNotFound{false};
  template<typename T> bool ObjectReader::readObject( TDirectory* f_, const std::vector<std::string>& objPathList_, const std::function<void(T*)>& action_ ){
    using namespace GenericToolbox::ColorCodes;
    T* obj;
    for( auto& objPath : objPathList_ ){
      obj = f_->Get<T>(objPath.c_str());
      if( obj != nullptr ){ break; }
    }
    if( obj == nullptr ){
      LogErrorIf(not ObjectReader::quiet) << redLightText << "Could not find object among names: " << resetColor << GenericToolbox::parseVectorAsString(objPathList_) << std::endl;
      LogThrowIf(ObjectReader::throwIfNotFound, "Object not found.");
      return false;
    }
    action_(obj);
    return true;
  }
  template<typename T> bool ObjectReader::readObject( TDirectory* f_, const std::string& objPath_, const std::function<void(T*)>& action_ ){ return readObject(f_, std::vector<std::string>{objPath_}, action_); }
  bool ObjectReader::readObject( TDirectory* f_, const std::string& objPath_){ return readObject<TObject>(f_, objPath_); }

}
